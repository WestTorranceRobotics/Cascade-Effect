#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTServo,  none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S3,     IR,             sensorHiTechnicIRSeeker1200)
#pragma config(Sensor, S4,     light,          sensorLightActive)
#pragma config(Motor,  mtr_S1_C1_1,     rightTrain,    tmotorTetrix, PIDControl, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     leftTrain,     tmotorTetrix, PIDControl, reversed)
#pragma config(Motor,  mtr_S1_C2_1,     Intake,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     LinearLift,    tmotorTetrix, openLoop, encoder)
#pragma config(Servo,  srvo_S1_C3_1,    servo1,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_3,    gripper,              tServoStandard)
#pragma config(Servo,  srvo_S1_C3_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_5,    box,                  tServoStandard)
#pragma config(Servo,  srvo_S1_C3_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


#include "JoystickDriver.c"

bool recieved = false;

void anushalizerobot()
{
	motor[leftTrain] = 0;
	motor[rightTrain] = 0;
	motor[LinearLift] = 0;
	motor[Intake] = 0;
	nMotorEncoder[leftTrain] = 0;
	nMotorEncoder[rightTrain] = 0;
	nMotorEncoder[LinearLift] = 0;
	servo[gripper] = 0;
	servo[box] = 70;
}

int wait(int waitlel)
{
	wait1Msec(waitlel);
	return waitlel;
}


void resetEncoders()
{
	motor[leftTrain] = 0;
	motor[rightTrain] = 0;
	motor[LinearLift] = 0;
	nMotorEncoder[leftTrain] = 0;
	nMotorEncoder[rightTrain] = 0;
	nMotorEncoder[LinearLift] = 0;
	wait(250);
}

int Drive(int Distance, int Lspeed, int Rspeed)
{
	while(nMotorEncoder[rightTrain] < Distance)
	{
		motor[leftTrain] = Lspeed;
		motor[rightTrain] = Rspeed;
	}

	return Distance;
}

int Reverse(int Rdistance, int Rlspeed, int Rrspeed)
{
	while(nMotorEncoder[rightTrain] > Rdistance)
	{
		motor[leftTrain] = Rlspeed;
		motor[rightTrain] = Rrspeed;
	}

	return Rdistance;
}

int Turn(int turnDistance, int turnRate)
{
	while(nMotorEncoder[rightTrain] < turnDistance)
	{
		motor[rightTrain] = turnRate;
		motor[leftTrain] = -turnRate;
	}
	return turnDistance;
}

task main()
{
	//waitForStart();
	anushalizerobot();
	wait(500);

	//Reverse(-1800, -5, -10);

	resetEncoders();

	Reverse(-1300, -10, -30);
	resetEncoders();


	int x = 0;
	while(x  < 10000)
	{
		servo[gripper] = 160;
		x++;
	}

	while(nMotorEncoder[LinearLift] < 1800)
	{
		nxtDisplayBigTextLine(3, "%d", nMotorEncoder[LinearLift]);
		motor[LinearLift] = 100;
	}

	motor[LinearLift] = 0;
	wait(250);

	int y = 0;
	while(y < 10000)
	{
		servo[box] = 190;
		y++;
	}

	wait(50);

	while(y > 0)
	{
		servo[box] = 80;
		y--;
	}

	while(nMotorEncoder[LinearLift] > 750)
	{
		nxtDisplayBigTextLine(3, "%d", nMotorEncoder[LinearLift]);
		motor[LinearLift] = -15;
	}
	resetEncoders();

	Drive(500, 30, 25);
	resetEncoders();

	Drive(1000, -80, 80);
	resetEncoders();

	Reverse(-200, -10, -30);
	resetEncoders();

	while(x > 0)
	{
		servo[gripper] = 0;
		x--;
	}

	Drive(200, 30, 40);
	resetEncoders();

	Reverse(-400, 80 , -80);
	resetEncoders();

	Reverse(-2000, -10, -100);
	resetEncoders();

	while(x  < 10000)
	{
		servo[gripper] = 160;
		x++;
	}

	while(nMotorEncoder[LinearLift] < 2000)
	{
		motor[LinearLift] = 100;
	}

	motor[LinearLift] = 0;
	wait(50);


	while(y < 10000)
	{
		servo[box] = 190;
		y++;
	}

	wait(50);

	while(y > 0)
	{
	servo[box] = 70;
	y--;
	}

//	Reverse(-500, 50, -50);






	/*

	while(nMotorEncoder[LinearLift] > 0)
	{
		motor[LinearLift] = -15;
	}

	resetEncoders();

	motor[leftTrain] = 100;
	wait1Msec(1500);

	Drive(1000, 20, 40);

*/
}
