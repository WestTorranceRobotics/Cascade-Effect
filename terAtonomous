#pragma config(Hubs,  S1, HTServo,  HTMotor,  none,     none)
#pragma config(Hubs,  S2, HTMotor,  HTMotor,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     ,               sensorI2CMuxController)
#pragma config(Sensor, S3,     IR,             sensorHiTechnicIRSeeker1200)
#pragma config(Sensor, S4,     touch,          sensorTouch)
#pragma config(Motor,  mtr_S1_C2_1,     leftTrain,     tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C2_2,     leftLift,      tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S2_C1_1,     rightLift,     tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S2_C1_2,     intake,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S2_C2_1,     rightTrain,    tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S2_C2_2,     motorI,        tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C1_1,    gripper1,             tServoStandard)
#pragma config(Servo,  srvo_S1_C1_2,    gripper2,             tServoStandard)
#pragma config(Servo,  srvo_S1_C1_3,    box,                  tServoStandard)
#pragma config(Servo,  srvo_S1_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"



void anushalizerobot()
{
	motor[leftTrain] = 0;
	motor[rightTrain] = 0;
	motor[intake] = 0;
	nMotorEncoder[leftTrain] = 0;
	nMotorEncoder[rightTrain] = 0;
	nMotorEncoder[leftLift] = 0;
	nMotorEncoder[rightLift] = 0;
	servo[gripper1] = 90;
	servo[gripper2] = 145;
	servo[box] = 65;
}

int wait(int waitlel)
{
	wait1Msec(waitlel);
	return waitlel;
}


void resetEncoders()
{
	motor[leftTrain] = 0;
	motor[rightTrain] = 0;
	motor[leftLift] = 0;
	motor[rightLift] = 0;
	nMotorEncoder[leftTrain] = 0;
	nMotorEncoder[rightTrain] = 0;
	nMotorEncoder[leftLift] = 0;
	nMotorEncoder[rightLift] = 0;
	wait(250);
}

void Drive(float tileDistance, int Lspeed, int Rspeed)
{

	int Distance = 2500*tileDistance;

	while(abs(nMotorEncoder[rightTrain]) < abs(Distance))
	{
		motor[leftTrain] = Lspeed;
		motor[rightTrain] = Rspeed;
	}
}

void DriveLift(float tileDistance, int Lspeed, int Rspeed, int LiftTarget)// only for going up
{

	int Distance = 2500*tileDistance;

	while(abs(nMotorEncoder[rightTrain]) < abs(Distance))
	{
		motor[leftTrain] = Lspeed;
		motor[rightTrain] = Rspeed;
		if(nMotorEncoder[leftLift] < LiftTarget)
		{
			motor[leftLift] = 100;
			motor[rightLift] = 100;
		}
	}
}

int IRPos;

task main()
{
	//waitForStart();
	anushalizerobot();
	wait(1000);


	if(SensorValue[IR] == 6)//find centerpiece position center goal facing parking zone
	{
		IRPos = 1;
	}
	else if(SensorValue[IR] == 5)//find centerpiece position diagonal
	{
		IRPos = 2;
	}
	else //find centerpiece position goal facing ramp
	{
		IRPos = 3;
	}
	
	if(IRPos == 1)
	{
		DriveLift(0.5, 30, 30, 3600);//note that DriveLift only works going up
		resetEncoders();
		
		Drive(-0.4, 50, -50);
		resetEncoders();
		
		DriveLift(1, 30, 30, 3600);
		resetEncoders();
		
		Drive(0.4, -50, 50);
		resetEncoders();	
	}
	
}
