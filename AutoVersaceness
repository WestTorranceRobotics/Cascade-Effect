#pragma config(Hubs, S1, HTServo, HTMotor, none, none)
#pragma config(Hubs, S2, HTMotor, HTMotor, none, none)
#pragma config(Sensor, S1, , sensorI2CMuxController)
#pragma config(Sensor, S2, , sensorI2CMuxController)
#pragma config(Sensor, S3, IR, sensorHiTechnicIRSeeker1200)
#pragma config(Sensor, S4, touch, sensorTouch)
#pragma config(Motor, mtr_S1_C2_1, leftTrain, tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor, mtr_S1_C2_2, leftLift, tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor, mtr_S2_C1_1, rightLift, tmotorTetrix, openLoop, encoder)
#pragma config(Motor, mtr_S2_C1_2, intake, tmotorTetrix, openLoop)
#pragma config(Motor, mtr_S2_C2_1, rightTrain, tmotorTetrix, openLoop, encoder)
#pragma config(Motor, mtr_S2_C2_2, motorI, tmotorTetrix, openLoop)
#pragma config(Servo, srvo_S1_C1_1, gripper1, tServoStandard)
#pragma config(Servo, srvo_S1_C1_2, gripper2, tServoStandard)
#pragma config(Servo, srvo_S1_C1_3, box, tServoStandard)
#pragma config(Servo, srvo_S1_C1_4, servo4, tServoNone)
#pragma config(Servo, srvo_S1_C1_5, servo5, tServoNone)
#pragma config(Servo, srvo_S1_C1_6, servo6, tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard !!*//

#include "JoystickDriver.c"

void anushalizerobot()
{
motor[leftTrain] = 0;
motor[rightTrain] = 0;
motor[intake] = 0;
nMotorEncoder[leftTrain] = 0;
nMotorEncoder[rightTrain] = 0;
nMotorEncoder[leftLift] = 0;
nMotorEncoder[rightLift] = 0;
servo[gripper1] = 90;
servo[gripper2] = 145;
servo[box] = 65;
}

int wait(int waitlel)
{
wait1Msec(waitlel);
return waitlel;
}

void resetEncoders()
{
motor[leftTrain] = 0;
motor[rightTrain] = 0;
// motor[leftLift] = 0;
// motor[rightLift] = 0;
nMotorEncoder[leftTrain] = 0;
nMotorEncoder[rightTrain] = 0;
//nMotorEncoder[leftLift] = 0;
//nMotorEncoder[rightLift] = 0;
wait(250);
}

int Drive(float tileDistance, int Lspeed, int Rspeed)
{
int Distance = 925*tileDistance; //original: 2500
while(abs(nMotorEncoder[rightTrain]) < abs(Distance))
{
motor[leftTrain] = Lspeed;
motor[rightTrain] = Rspeed;
}
return Distance;
}

int IRPos;

task main() //let us begin...
{
anushalizerobot();

wait(800);
resetEncoders();

//925 = approximate distance for one tile
//3.533 tiles = distance on top of ramp

if(SensorValue[IR] == 6)//searching...
{
IRPos = 1;
}
else if(SensorValue[IR] == 5)//searching...
{
IRPos = 2;
}
else //searching...
{
IRPos = 3;
}
nxtDisplayBigTextLine(2, "%d", SensorValue[IR]);
nxtDisplayBigTextLine(4, "%d", IRPos);

if(IRPos == 1) //first option
{

//Write your own!!!!

/*
Drive(2, 32, 30);//approach center
resetEncoders();

Drive(1, 80, 80);//approach center
resetEncoders();

Drive(-1, -30, -30);//90 turn right
resetEncoders();

Drive(-0.8, 50, -50);//90 turn right
resetEncoders();

Drive(0.5, 30, 30);
resetEncoders();

Drive(-0.8, 50, -50);//90 turn right
resetEncoders();

Drive(-3, -50, -50);
resetEncoders();
*/

int x = 0;
		while(x  < 10000)
		{
			servo[gripper1] = 0;
			servo[gripper2] = 0;
			x++;
		}

		while(nMotorEncoder[leftLift] < 3600)
		{
			motor[leftLift] = motor[rightLift] = 100;
		}

		motor[leftLift] = motor[rightLift] = 0;
		wait(50);

		int y = 0;
		while(y < 10000)
		{
			servo[box] = 160;
			y++;
		}

		wait(1000);

		while(y > 0)
		{
				servo[box] = 65;
				y--;
		}
		wait(50);
		
		while(nMotorEncoder[leftLift] > 0)
		{
			motor[leftLift] = motor[rightLift] = -20;
		}

}

/*
Drive(3000, 30, 30); //WILL move robot off ramp
resetEncoders();

Drive(1100, -30, 30); //WILL turn robot to face the "stick"
resetEncoders();

Drive(1400, 100, 100); //WILL run robot into "stick"
resetEncoders();

Drive(500, -50, -50); //WILL move robot back from the "stick"
resetEncoders();
*/
}
