#pragma config(Hubs, S1, HTServo, HTMotor, none, none)
#pragma config(Hubs, S2, HTMotor, HTMotor, none, none)
#pragma config(Sensor, S1, , sensorI2CMuxController)
#pragma config(Sensor, S2, , sensorI2CMuxController)
#pragma config(Sensor, S3, IR, sensorHiTechnicIRSeeker1200)
#pragma config(Sensor, S4, touch, sensorTouch)
#pragma config(Motor, mtr_S1_C2_1, leftTrain, tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor, mtr_S1_C2_2, leftLift, tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor, mtr_S2_C1_1, rightLift, tmotorTetrix, openLoop, encoder)
#pragma config(Motor, mtr_S2_C1_2, intake, tmotorTetrix, openLoop)
#pragma config(Motor, mtr_S2_C2_1, rightTrain, tmotorTetrix, openLoop, encoder)
#pragma config(Motor, mtr_S2_C2_2, motorI, tmotorTetrix, openLoop)
#pragma config(Servo, srvo_S1_C1_1, gripper1, tServoStandard)
#pragma config(Servo, srvo_S1_C1_2, gripper2, tServoStandard)
#pragma config(Servo, srvo_S1_C1_3, box, tServoStandard)
#pragma config(Servo, srvo_S1_C1_4, servo4, tServoNone)
#pragma config(Servo, srvo_S1_C1_5, servo5, tServoNone)
#pragma config(Servo, srvo_S1_C1_6, servo6, tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard !!*//

//Up to line 90 is GOOD

#include "JoystickDriver.c"

void anushalizerobot()
{
motor[leftTrain] = 0;
motor[rightTrain] = 0;
motor[intake] = 0;
nMotorEncoder[leftTrain] = 0;
nMotorEncoder[rightTrain] = 0;
nMotorEncoder[leftLift] = 0;
nMotorEncoder[rightLift] = 0;
servo[gripper1] = 90;
servo[gripper2] = 145;
servo[box] = 65;
}

int wait(int waitlel)
{
wait1Msec(waitlel);
return waitlel;
}

void resetEncoders()
{
motor[leftTrain] = 0;
motor[rightTrain] = 0;
// motor[leftLift] = 0;
// motor[rightLift] = 0;
nMotorEncoder[leftTrain] = 0;
nMotorEncoder[rightTrain] = 0;
//nMotorEncoder[leftLift] = 0;
//nMotorEncoder[rightLift] = 0;
wait(250);
}

int Drive(float tileDistance, int Lspeed, int Rspeed)
{
int Distance = 925*tileDistance; //original: 2500
while(abs(nMotorEncoder[rightTrain]) < abs(Distance))
{
motor[leftTrain] = Lspeed;
motor[rightTrain] = Rspeed;
}
return Distance;
}

int IRPos;

task main() //let us begin...
{
anushalizerobot();

wait(800);
resetEncoders();

//925 = approximate distance for one tile
//3.53 tiles = distance on top of ramp

Drive(2.53, 30, 30); //move off ramp
resetEncoders();

Drive(1, -30, 30); //turn 90 left
resetEncoders();

if(SensorValue[IR] == 5)//searching for 1...
{
IRPos = 1;
}
else if(SensorValue[IR] == 4)//searching for 2...
{
IRPos = 2;
}
else //searching for 3...
{
IRPos = 3;
}
nxtDisplayBigTextLine(2, "%d", SensorValue[IR]);
nxtDisplayBigTextLine(4, "%d", IRPos);


	if(IRPos == 1)
	{

		Drive(1.5, 30, 30);
		resetEncoders();

		Drive(-0.8, 50, -50);
		resetEncoders();

		Drive(1, 30, 30);
		resetEncoders();

		Drive(0.8, -50, 50);
		resetEncoders();

		Drive(1.6, 80, 80);
		resetEncoders();

		Drive(-0.5, -50, -50);
		resetEncoders();

		Drive(-0.8, 50, -50);
		resetEncoders();

		Drive(0.6, 30, 30);
		resetEncoders();

		Drive(-0.8, 50, -50);
		resetEncoders();

		Drive(-3, -50, -50);
		resetEncoders();

		int x = 0;
		while(x  < 10000)
		{
			servo[gripper1] = 0;
			servo[gripper2] = 0;
			x++;
		}

		while(nMotorEncoder[leftLift] < 3600)
		{
			motor[leftLift] = motor[rightLift] = 100;
		}

		motor[leftLift] = motor[rightLift] = 0;
		wait(50);

		int y = 0;
		while(y < 10000)
		{
			servo[box] = 160;
			y++;
		}

		wait(1000);

		while(y > 0)
		{
				servo[box] = 65;
				y--;
		}
		wait(50);
		
		while(nMotorEncoder[leftLift] > 0)
		{
			motor[leftLift] = motor[rightLift] = -20;
		}
		
		resetEncoders();
		
	}
	else if(IRPos == 2)
	{
			Drive(2, 30, 30);
			resetEncoders();

			Drive(-0.4, 50, -50);
			resetEncoders();

			Drive(1, 80, 80);
			resetEncoders();

			Drive(-0.4, -30, -30);
			resetEncoders();

			Drive(-0.8, 50, -50);
			resetEncoders();

			Drive(0.3, 30, 30);
			resetEncoders();

			Drive(-0.8, 50, -50);
			resetEncoders();

			Drive(-1.3, -30, -30);
			resetEncoders();

			Drive(-1.6, -30, -30);
			resetEncoders();

			int x = 0;
			while(x  < 10000)
			{
				servo[gripper1] = 0;
				servo[gripper2] = 0;
				x++;
			}

			while(nMotorEncoder[leftLift] < 3600)
			{
				motor[leftLift] = motor[rightLift] = 100;
			}

			motor[leftLift] = motor[rightLift] = 0;
			wait(50);

			int y = 0;
			while(y < 10000)
			{
				servo[box] = 160;
				y++;
			}

			wait(1000);

			while(y > 0)
			{
				servo[box] = 65;
				y--;
			}
	
			wait(50);
			
			while(nMotorEncoder[leftLift] > 0)
			{
				motor[leftLift] = motor[rightLift] = -20;
			}
				
			resetEncoders();

	}
	else if(IRPos == 3)
	{
		Drive(2.5, 30, 30);
		resetEncoders();
		
		Drive(-0.8, 50, -50);
		resetEncoders();
		
		Drive(0.6, 80, 80);
		resetEncoders();
		
		Drive(-0.5, -30, -30);
		resetEncoders();
		
		Drive(-0.8, 50, -50);
		resetEncoders();
		
		Drive(0.2, 30, 30);
		resetEncoders();
		
		Drive(-0.8, 50, -50);
		resetEncoders();
		
		Drive(2, -30, -50);
		resetEncoders();
		
		Drive(0.8, -50, 50);
		resetEncoders();
		
		Drive(3, -30, -30);
		resetEncoders();
		
		int x = 0;
			while(x  < 10000)
			{
				servo[gripper1] = 0;
				servo[gripper2] = 0;
				x++;
			}

			while(nMotorEncoder[leftLift] < 3600)
			{
				motor[leftLift] = motor[rightLift] = 100;
			}

			motor[leftLift] = motor[rightLift] = 0;
			wait(50);

			int y = 0;
			while(y < 10000)
			{
				servo[box] = 160;
				y++;
			}

			wait(1000);

			while(y > 0)
			{
				servo[box] = 65;
				y--;
			}
	
			wait(50);
			
			while(nMotorEncoder[leftLift] > 0)
			{
				motor[leftLift] = motor[rightLift] = -20;
			}
				
			resetEncoders();
	}


}

/*Scoring:
- 20 points for a Robot that started the Match Completely On the Platform and got On to any portion of the Playing Field Floor.
- 20 points for each Rolling Goal In its Allianceâ€™s Parking Zone.
- 30 points for Releasing the Kickstand (whether or not the Balls scatter onto the Playing Field).
- 30 points for each Rolling Goal In which at least one Autonomous Ball is Scored. (Note that this Score is per Goal, not per Ball.)
- 60 points if any Autonomous Balls are Scored In the Center Goal.
*/
