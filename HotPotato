#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTServo,  none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Motor,  motorA,           ,             tmotorNXT, openLoop)
#pragma config(Motor,  motorB,           ,             tmotorNXT, openLoop)
#pragma config(Motor,  motorC,           ,             tmotorNXT, openLoop)
#pragma config(Motor,  mtr_S1_C1_1,     motorD,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     motorE,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_1,     motorF,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     lanushearLift, tmotorTetrix, openLoop, encoder)
#pragma config(Servo,  srvo_S1_C3_1,    servo7,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_2,    servo8,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_3,    servo9,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_4,    servo10,              tServoNone)
#pragma config(Servo,  srvo_S1_C3_5,    servo11,              tServoNone)
#pragma config(Servo,  srvo_S1_C3_6,    servo12,              tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"

int liftValue;
int liftPower;
int Start_Encoder;
int EncoderSwagV2;
int I = 0;
int P;
int error;
int lanushearlifter = 0;
bool intakeActive = true;
bool pressed = false;

void initialize()
{
	motor[lanushearLift] = 0;
	nMotorEncoder[lanushearLift] = 0;
}

task main()
{
	initialize();
	Start_Encoder = nMotorEncoder[lanushearLift];
	liftValue = Start_Encoder;
	while(true)
	{

			if(joy1Btn(1))
			{
				liftValue = Start_Encoder + 666; //hail satan
			}
			else if(joy1Btn(2))
			{
				liftValue = Start_Encoder + 1332;
			}
			else if(joy1Btn(3))
			{
				liftValue = Start_Encoder + 1998;
			}
			else if(joy1Btn(4))
			{
				liftValue = Start_Encoder + 1000;
			}
			else if(joy1Btn(10))
			{
				liftValue = Start_Encoder;
			}

			EncoderSwagV2 = nMotorEncoder[lanushearLift];

			error = liftValue - nMotorEncoder[lanushearLift];

			P = error;


			if (I + error < 10000 && I + error > -10000)
			{
				I = I + error;
			}


			liftPower = (P/8 + I/2000);

			if(error > 10)
			{
				motor[lanushearLift] = 100;
			}
			else if(error < -10)
			{
				motor[lanushearLift] = -15;
			}
			else
			{
				motor[lanushearLift] = 0;
			}







			nxtDisplayBigTextLine(3, "%d", nMotorEncoder[lanushearLift]);
	}


}
