#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTServo,  none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S4,     light,          sensorLightActive)
#pragma config(Motor,  mtr_S1_C1_1,     leftNush,      tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     rightNush,     tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C2_1,     nushTake,      tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     lanushearLift, tmotorTetrix, openLoop, encoder)
#pragma config(Servo,  srvo_S1_C3_1,    servo1,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_3,    box,                  tServoStandard)
#pragma config(Servo,  srvo_S1_C3_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_5,    gripper,              tServoStandard)
#pragma config(Servo,  srvo_S1_C3_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"

float liftValue;
int liftPower;
float Start_Encoder;
int EncoderSwagV2;
int I = 0;
int P;
int error;
int ballsPassed = 0;
//int ballsPassed = 0; for ball counter if used kiril sucks dick
//bool toggle = false;
bool gripToggle = false;
//bool ballPassing = false; for ball counter if used
bool boxToggle = false;
bool intakeActive = true;//for ball counter, if used
bool pressed1 = false;
bool pressed2 = false;
bool pressed3 = false;
bool ballPassing = false;
bool STAHP = false;
bool liftMode = true; //switch between manual and auto linear mode, true is auto, false is manual
string cheese = "lelelelelelelelellel!!!!!!!1111!!!1";

void initializerobot()
{
	motor[leftNush] = 0;
	motor[rightNush] = 0;
	motor[lanushearLift] = 0;
	motor[nushTake] = 0;
	nMotorEncoder[leftNush] = 0;
	nMotorEncoder[rightNush] = 0;
	nMotorEncoder[lanushearLift] = 0;
	servo[gripper] = 0;
	servo[box] = 130;
}


task main()
{
	waitForStart();
	initializerobot();
	Start_Encoder = nMotorEncoder[lanushearLift];
	//liftValue = Start_Encoder + 100;//set box to above small balls, dont use yet
	while(true)
	{
		//driver 1 left joystick controls left train
		if(joystick.joy1_y1 > 15 || joystick.joy1_y1 < -15)
			{
				motor[leftNush] = joystick.joy1_y1 * 100/128;
			}
			else
			{
				motor[leftNush] = 0;
			}

			//driver 1 right joystick controls right train
			if(joystick.joy1_y2 > 15 || joystick.joy1_y2 < -15)
			{
				motor[rightNush] = joystick.joy1_y2 * 100/128;
			}
			else
			{
				motor[rightNush] = 0;
			}

			//driver 2 left joystick controls intake
			if(intakeActive == true)
			{
				if(joystick.joy2_y1 > 15 || joystick.joy2_y1 < -15)
				{
					motor[nushTake] = joystick.joy2_y1 * 100/128;
				}
				else
				{
					motor[nushTake] = 0;
				}
			}

		//driver 2 right bumper toggles box open/ close
			if(joy2Btn(6) == 1 && pressed1 == false)
			{
				pressed1 = true;
				boxToggle = !boxToggle;
			}
			else if(joy2Btn(6) == 0)
			{
				pressed1 = false;
			}

			//move servos based on toggle
			if(boxToggle == true)//open
			{
				servo[box] = 60;
			}
			else //close
			{
				servo[box] = 130;
			}

			//driver 2 left bumper controls grip toggle
			if(joy2Btn(5) == 1 && pressed2 == false)
			{
				pressed2 = true;
				gripToggle = !gripToggle;
			}
			else if(joy2Btn(5) == 0)
			{
				pressed2 = false;
			}

			//move servos based on toggle
			if(gripToggle == true)//grip
			{
				servo[gripper] = 160;
			}
			else//release
			{
				servo[gripper] = 0;
			}

			// <copy pasta>

			if(liftMode == true)
			{

				if(joy1Btn(1) && pressed3 == false)
				{
					liftMode = !liftMode;
					pressed3 = true;
				}
				else if(!joy1Btn(1))
				{
					pressed3 = false;
				}
					if(joy2Btn(1))
					{
						STAHP = false;
						liftValue = Start_Encoder + 666; //hail satan, short
						intakeActive = true;
					}
					else if(joy2Btn(2))
					{
						STAHP = false;
						liftValue = Start_Encoder + 666 * 2;// med, not tested
						intakeActive = true;
					}
					else if(joy2Btn(3))
					{
						STAHP = false;
						liftValue = Start_Encoder + 666 * 3;//tall, not tested
						intakeActive = true;
					}
					else if(joy2Btn(4))
					{
						STAHP = false;
						liftValue = Start_Encoder + 666 * 3.5;//high, not tested
						intakeActive = true;
					}
					else if(joy2Btn(9))
					{
						STAHP = false;
						liftValue = Start_Encoder;// reset full down
						intakeActive = true;
					}
					else if(joy2Btn(10))
					{
						STAHP = false;
						liftValue = Start_Encoder + 100;// reset above small balls, not tested
						intakeActive = true;
					}

					EncoderSwagV2 = nMotorEncoder[lanushearLift]; // return of encoder swag

					error = liftValue - nMotorEncoder[lanushearLift]; //calculate the difference of target and actual values


					P = error;

					if (I + error < 10000 && I + error > -10000)
					{
						I = I + error;
					}


					liftPower = (P/5*8);


					if(error > 50 && STAHP == false)
					{
						motor[lanushearLift] = 100; //move box up based on positive error
					}
					else if(error < -50 && STAHP == false)
					{
						motor[lanushearLift] = -15; //move box down based on negative error
					}
					else
					{
						motor[lanushearLift] = 0; //little to no error, no movement
						STAHP = true;
					}
				}
				else
				{

				if(joy1Btn(1) && pressed3 == false)
				{
					liftMode = !liftMode;
					pressed3 = true;
				}
				else if(!joy1Btn(1))
				{
					pressed3 = false;
				}

					if(joy2Btn(7))
					{
						motor[lanushearLift] = 100; //move box up based on positive error
					}
					else if(joy2Btn(8))
					{
						motor[lanushearLift] = -15; //move box down based on negative error
					}
					else
					{
						motor[lanushearLift] = 0; //little to no error, no movement
					}
				}

			// </copy pasta>

//bump
		if(SensorValue[light] > 33 && ballPassing == false)
		{
			ballsPassed++;
			ballPassing = true;
		}
		else if(SensorValue[light] < 33)
		{
			ballPassing = false;
		}

		if(ballsPassed >= 5)
		{
			intakeActive = false;
		}



	}


}#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTServo,  none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S4,     light,          sensorLightActive)
#pragma config(Motor,  mtr_S1_C1_1,     leftTrain,      tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     rightTrain,     tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C2_1,     Intake,      tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     linearLift, tmotorTetrix, openLoop, encoder)
#pragma config(Servo,  srvo_S1_C3_1,    servo1,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_3,    box,                  tServoStandard)
#pragma config(Servo,  srvo_S1_C3_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_5,    gripper,              tServoStandard)
#pragma config(Servo,  srvo_S1_C3_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"

float liftValue;
int liftPower;
float Start_Encoder;
int EncoderSwagV2;
int I = 0;
int P;
int error;
int ballsPassed = 0;
//int ballsPassed = 0; for ball counter if used
//bool toggle = false;
bool gripToggle = false;
//bool ballPassing = false; for ball counter if used
bool boxToggle = false;
bool intakeActive = true;//for ball counter, if used
bool pressed1 = false;
bool pressed2 = false;
bool pressed3 = false;
bool ballPassing = false;
bool AntiSpaz = false;
bool liftMode = true; //switch between manual and auto linear mode, true is auto, false is manual
string cheese = "lelelelelelelelellel!!!!!!!1111!!!1";

void initializerobot()
{
	motor[leftTrain] = 0;
	motor[rightTrain] = 0;
	motor[linearLift] = 0;
	motor[Intake] = 0;
	nMotorEncoder[leftTrain] = 0;
	nMotorEncoder[rightTrain] = 0;
	nMotorEncoder[linearLift] = 0;
	servo[gripper] = 0;
	servo[box] = 130;
}


task main()
{
	waitForStart();
	initializerobot();
	Start_Encoder = nMotorEncoder[linearLift];
	//liftValue = Start_Encoder + 100;//set box to above small balls, dont use yet
	while(true)
	{
		//driver 1 left joystick controls left train
		if(abs(joystick.joy1_y1) < 15)
			{
				motor[leftTrain] = 0;
			}
			else
			{
				motor[leftTrain] = joystick.joy1_y1 * 100/128;
			}

			//driver 1 right joystick controls right train
			if(abs(joystick.joy1_y2) < 15)
			{
				motor[rightTrain] = 0;
			}
			else
			{
				motor[rightTrain] = joystick.joy1_y2 * 100/128;
			}

			//driver 2 left joystick controls intake
			if(intakeActive == true)
			{
				if(joystick.joy2_y1 > 15 || joystick.joy2_y1 < -15)
				{
					motor[Intake] = joystick.joy2_y1 * 100/128;
				}
				else
				{
					motor[Intake] = 0;
				}
			}

		//driver 2 right bumper toggles box open/ close
			if(joy2Btn(6) == 1 && pressed1 == false)
			{
				pressed1 = true;
				boxToggle = !boxToggle;
			}
			else if(joy2Btn(6) == 0)
			{
				pressed1 = false;
			}

			//move servos based on toggle
			if(boxToggle == true)//open
			{
				servo[box] = 60;
			}
			else //close
			{
				servo[box] = 130;
			}

			//driver 2 left bumper controls grip toggle
			if(joy2Btn(5) == 1 && pressed2 == false)
			{
				pressed2 = true;
				gripToggle = !gripToggle;
			}
			else if(joy2Btn(5) == 0)
			{
				pressed2 = false;
			}

			//move servos based on toggle
			if(gripToggle == true)//grip
			{
				servo[gripper] = 160;
			}
			else//release
			{
				servo[gripper] = 0;
			}

			// <copy pasta>

			if(liftMode == true)
			{

				if(joy1Btn(1) && pressed3 == false)
				{
					liftMode = !liftMode;
					pressed3 = true;
				}
				else if(!joy1Btn(1))
				{
					pressed3 = false;
				}
					if(joy2Btn(1))
					{
						liftValue = Start_Encoder + 666; //hail satan, short
						intakeActive = true;
					}
					else if(joy2Btn(2))
					{
						liftValue = Start_Encoder + 666 * 2;// med, not tested
						intakeActive = true;
					}
					else if(joy2Btn(3))
					{
						liftValue = Start_Encoder + 666 * 3;//tall, not tested
						intakeActive = true;
					}
					else if(joy2Btn(4))
					{
						liftValue = Start_Encoder + 2427;//high, not tested
						intakeActive = true;
					}
					else if(joy2Btn(9))
					{
						liftValue = Start_Encoder;// reset full down
						intakeActive = true;
					}
					else if(joy2Btn(10))
					{
						liftValue = Start_Encoder + 100;// reset above small balls, not tested
						intakeActive = true;
					}

					EncoderSwagV2 = nMotorEncoder[linearLift]; // return of encoder swag

					error = liftValue - nMotorEncoder[linearLift]; //calculate the difference of target and actual values


					P = error;

					if (I + error < 10000 && I + error > -10000)
					{
						I = I + error;
					}

					liftPower = (P/5*8);


						if(error > 20 && AntiSpaz == false)
						{
							motor[linearLift] = 100;
						}
						else if(error <= 20 && AntiSpaz == false)
						{
							AntiSpaz = true;
						}
						else if(error > 45 && AntiSpaz == true)
						{
							motor[linearLift] = 100;
						}
					  else if(error < -20 && AntiSpaz == false)
						{
							motor[linearLift] = -15;
						}
						else if(error >= -20 && AntiSpaz == false)
						{
							AntiSpaz = true;
						}
						else if(error < -45 && AntiSpaz == true)
						{
							motor[linearLift] = -15;
						}
						else
						{
							motor[linearLift] = 0; //little to no error, no movement
						}
				}
				else
				{

				if(joy1Btn(1) && pressed3 == false)
				{
					liftMode = !liftMode;
					pressed3 = true;
				}
				else if(!joy1Btn(1))
				{
					pressed3 = false;
				}

					if(joy2Btn(7))
					{
						motor[linearLift] = 100; //move box up based on button
					}
					else if(joy2Btn(8))
					{
						motor[linearLift] = -15; //move box down based on button
					}
					else
					{
						motor[linearLift] = 0; // no button, no movement
					}
				}

			// </copy pasta>

//bump
		if(SensorValue[light] > 33 && ballPassing == false)
		{
			ballsPassed++;
			ballPassing = true;
		}
		else if(SensorValue[light] < 33)
		{
			ballPassing = false;
		}

		if(ballsPassed >= 5)
		{
			intakeActive = false;
		}



	}


}
