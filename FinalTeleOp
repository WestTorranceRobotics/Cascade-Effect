#pragma config(Hubs,  S1, HTServo,  HTMotor,  none,     none)
#pragma config(Hubs,  S2, HTMotor,  HTMotor,  none,     none)
#pragma config(Sensor, S4,     touch,          sensorTouch)
#pragma config(Motor,  mtr_S1_C2_1,     leftTrain,     tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C2_2,     leftLift,      tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S2_C1_1,     rightLift,     tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S2_C1_2,     intake,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S2_C2_1,     rightTrain,    tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S2_C2_2,     motorI,        tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C1_1,    gripper1,             tServoStandard)
#pragma config(Servo,  srvo_S1_C1_2,    gripper2,             tServoStandard)
#pragma config(Servo,  srvo_S1_C1_3,    box,                  tServoStandard)
#pragma config(Servo,  srvo_S1_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"

int liftValue;
int liftPower;
int Start_Encoder;
int EncoderSwagV2;
int EncoderSwagV3;
int I = 0;
int P;
int errorL;
int errorR;
int ballsPassed = 0;
//int ballsPassed = 0; for ball counter if used
//bool toggle = false;
bool gripToggle = true;
//bool ballPassing = false; for ball counter if used
bool boxToggle = false;
bool intakeActive = true;//for ball counter, if used
bool pressed1 = false;
bool pressed2 = false;
bool pressed3 = false;
bool pressed4 = false;
bool pressed5 = false;
bool pressed6 = false;
bool tamaki4lyfe = false;
bool ballPassing = false;
bool AntiSpazL = false;
bool AntiSpazR = false;
bool liftMode = true; //switch between manual and auto linear mode, true is auto, false is manual
bool rampMode = false;
bool zeroOn = true;
bool setZero = false;
bool zeroCom = false;
bool resetLin = false;
string cheese = "lol";


void initializerobot()
{
	motor[leftTrain] = 0;
	motor[rightTrain] = 0;
	motor[leftLift] = 0;
	motor[rightLift] = 0;
	motor[intake] = 0;
	nMotorEncoder[leftTrain] = 0;
	nMotorEncoder[rightTrain] = 0;
	nMotorEncoder[leftLift] = 0;
	nMotorEncoder[rightLift] = 0;
	servo[gripper1] = 90;
	servo[gripper2] = 145;
	servo[box] = 65;
}


task main()
{
	waitForStart();
	initializerobot();

	Start_Encoder = 0;
	//liftValue = Start_Encoder + 100;//set box to above small balls, dont use yet
	while(true)
	{
		//driver 1 left joystick controls left train

			//driver 1 right joystick controls right train

			if(joy1Btn(5))
			{
				if(abs(joystick.joy1_y2) < 15)
				{
					motor[rightTrain] = 0;
				}
				else
				{
					motor[rightTrain] = joystick.joy1_y2 * 100/384;
				}

				if(abs(joystick.joy1_y1) < 15)
				{
					motor[leftTrain] = 0;
				}
				else
				{
					motor[leftTrain] = joystick.joy1_y1 * 100/384;
				}
			}
			else if(joy1Btn(7))
			{
				if(abs(joystick.joy1_y2) < 15)
				{
					motor[rightTrain] = 0;
				}
				else
				{
					motor[rightTrain] = joystick.joy1_y2 * 100/128;
				}

				if(abs(joystick.joy1_y1) < 15)
				{
					motor[leftTrain] = 0;
				}
				else
				{
					motor[leftTrain] = joystick.joy1_y1 * 100/128;
				}
			}
			else
			{
				if(abs(joystick.joy1_y2) < 15)
				{
					motor[rightTrain] = 0;
				}
				else
				{
					motor[rightTrain] = joystick.joy1_y2 * 200/384;
				}

				if(abs(joystick.joy1_y1) < 15)
				{
					motor[leftTrain] = 0;
				}
				else
				{
					motor[leftTrain] = joystick.joy1_y1 * 200/384;
				}
			}



			//driver 2 left joystick controls intake

			if(abs(joystick.joy2_y1) < 60)
			{
				motor[intake] = 0;
			}
			else
			{
				motor[intake] = joystick.joy2_y1 * 100/128;
			}


		//driver 2 right bumper toggles box open/ close
			if(joy1Btn(8) == 1 && pressed1 == false)
			{
				pressed1 = true;
				boxToggle = true;
			}
			else if(joy1Btn(6) == 1 && pressed1 == false)
			{
				pressed1 = true;
				boxToggle = false;
			}
			else if(!joy2Btn(8) && !joy2Btn(6))
			{
				pressed1 = false;
			}

			//move servos based on toggle
			if(boxToggle == true)//open
			{
				servo[box] = 160;
			}
			else //close
			{
				servo[box] = 65;
			}

			//driver 2 left bumper controls grip toggle
			if(joy1Btn(8) == 1 && pressed2 == false)
			{
				pressed2 = true;
				gripToggle = true;
			}
			else if(joy1Btn(6) == 1 && pressed2 == false)
			{
				pressed2 = true;
				gripToggle = false;
			}
			else if(!joy1Btn(8) && !joy1Btn(6))
			{
				pressed2 = false;
			}


			//move servos based on toggle
			if(gripToggle == true)//grip
			{
				servo[gripper1] = 0;
				servo[gripper2] = 0;
			}
			else//release
			{
				servo[gripper1] = 90;
				servo[gripper2] = 145;
			}

			// <copy pasta>



				if(liftMode == true)
				{
					if(joy2Btn(2))
					{
						liftValue = Start_Encoder + 3500; //short

					}
					else if(joy2Btn(3))
					{
						liftValue = Start_Encoder + 7500;// med
						intakeActive = true;
					}
					else if(joy2Btn(4))
					{
						liftValue = Start_Encoder + 11500;//tall
						intakeActive = true;
					}
					else if(joy2Btn(7))
					{
						liftValue = Start_Encoder;//reset
						intakeActive = true;
					}
					else if(joy2Btn(5))
					{
						liftValue = Start_Encoder + 500;//habove small balls
						intakeActive = true;
					}/*
					else if(joy1Btn(2))
					{
						liftValue = Start_Encoder;//habove small balls
						intakeActive = true;
					}*/

					if(joy2Btn(9) && pressed3 == false)
						{
							liftMode = false;
							pressed3 = true;
						}
						else if(!joy2Btn(9))
						{
							pressed3 = false;
						}




						if(errorL > 10 && AntiSpazL == false)
						{
							motor[leftLift] = 100;
							motor[rightLift] = 100;
						}
						else if(errorL <= 10 && AntiSpazL == false)
						{
							AntiSpazL = true;
						}
						else if(errorL > 100 && AntiSpazL == true)
						{
							motor[leftLift] = 100;
							motor[rightLift] = 100;
						}
					  else if(errorL < -10 && AntiSpazL == false)
						{
							motor[leftLift] = -20;
							motor[rightLift] = -20;
						}
						else if(errorL >= -10 && AntiSpazL == false)
						{
							AntiSpazL = true;
						}
						else if(errorL < -100 && AntiSpazL == true)
						{
							motor[leftLift] = -20;
							motor[rightLift] = -20;
						}
						else
						{
							motor[leftLift] = 0;
							motor[rightLift] = 0;
						}
/*
						if(errorR > 10 && AntiSpazR == false)
						{
							motor[rightLift] = 100;
						}
						else if(errorR <= 10 && AntiSpazR == false)
						{
							AntiSpazR = true;
						}
						else if(errorR > 100 && AntiSpazR == true)
						{
							motor[rightLift] = 100;
						}
					  else if(errorR < -10 && AntiSpazR == false)
						{
							motor[rightLift] = -20;
						}
						else if(errorR >= -10 && AntiSpazR == false)
						{
							AntiSpazR = true;
						}
						else if(errorR < -100 && AntiSpazR == true)
						{
							motor[rightLift] = -20;
						}
						else
						{
							//if((EncoderSwagV3 - EncoderSwagV2) > 10)
							//{
							//	motor[rightLift] = -5;
							//}
							//else
							//{
									motor[rightLift] = 0;
						//	}

						 //little to no error, no movement
						}
						*/
						if(EncoderSwagV2 < 3000 && boxToggle == true)
						{
							boxToggle = false;
						}

					}
					else
					{
						if(joy2Btn(9) && pressed3 == false)
						{
							liftMode = true;
							pressed3 = true;
						}
						else if(!joy2Btn(9))
						{
							pressed3 = false;
						}

						if(joy2Btn(10) && pressed6 == false)
						{
							zeroOn = !zeroOn;
							pressed6 = true;
						}
						else if(!joy2Btn(10))
						{
							pressed6 = false;
						}




						if(zeroOn == true)
						{

							if(setZero == true)
							{
								nMotorEncoder[leftLift] = nMotorEncoder[rightLift] = 0;
								setZero == false;
							}

							if((nMotorEncoder[leftLift] < 100) && joystick.joy2_y2 < 0)
							{
								motor[leftLift] = motor[rightLift] = 0;
							}
							else if((nMotorEncoder[leftLift] < 100) && joystick.joy2_y2 > 15)
							{
								motor[leftLift] = motor[rightLift] = joystick.joy2_y2;
							}/*
							if(SensorValue[touch] == 1 && joystick.joy2_y2 < 0)
							{
								motor[leftLift] = motor[rightLift] = 0;
							}
							else if(SensorValue[touch] == 1 && joystick.joy2_y2 > 15)
							{
								motor[leftLift] = motor[rightLift] = joystick.joy2_y2;
							}*/
							else if(abs(joystick.joy2_y2) < 15)
							{
								motor[leftLift] = motor[rightLift] = 0;
							}
							else
							{
								motor[leftLift] = motor[rightLift] = joystick.joy2_y2;
							}
						}
						else
						{

							if(abs(joystick.joy2_y2) < 15)
							{
								motor[leftLift] = motor[rightLift] = 0;
							}
							else
							{
								motor[leftLift] = motor[rightLift] = joystick.joy2_y2;
							}
						}

						if(setZero == false)
						{
							setZero == true;
						}

						if(EncoderSwagV2 < 3000 && boxToggle == true)
						{
							boxToggle = false;
						}

					}

					EncoderSwagV2 = nMotorEncoder[leftLift]; // return of encoder swag
					EncoderSwagV3 = nMotorEncoder[rightLift];

					errorL = liftValue - nMotorEncoder[leftLift]; //calculate the difference of target and actual values
					errorR = liftValue - nMotorEncoder[rightLift];


					//P = error;

					//if (I + error < 10000 && I + error > -10000)
					//{
					//	I = I + error;
					//}

					//liftPower = (P/5*8);

					/*
					if(joy2Btn(8))
					{
						motor[leftLift] = 100;
						motor[rightLift] = 100;
					}
					else if(joy2Btn(7))
					{
						motor[leftLift] = -15;
						motor[rightLift] = -15;
					}
					else
					{
						motor[leftLift] = 0;
						motor[rightLift] = 0;
					}

					if(EncoderSwagV2 < 0)
					{
						motor[leftLift] = 20;
						motor[rightLift] = 20;
					}

					if(EncoderSwagV3 < 0)
					{
						motor[leftLift] = 20;
						motor[rightLift] = 20;
					}
					*/





			// </copy pasta>


//bump
				/*
		if(SensorValue[light] > 33 && ballPassing == false)
		{
			ballsPassed++;
			ballPassing = true;
		}
		else if(SensorValue[light] < 33)
		{
			ballPassing = false;
		}

		if(ballsPassed >= 5)
		{
			intakeActive = false;
		}
*/


	}

}
