#pragma config(Hubs,  S1, HTServo,  HTMotor,  none,     none)
#pragma config(Hubs,  S2, HTMotor,  HTMotor,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     ,               sensorI2CMuxController)
#pragma config(Sensor, S3,     IR,             sensorHiTechnicIRSeeker1200)
#pragma config(Sensor, S4,     touch,          sensorTouch)
#pragma config(Motor,  mtr_S1_C2_1,     leftTrain,     tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C2_2,     leftLift,      tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S2_C1_1,     rightLift,     tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S2_C1_2,     intake,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S2_C2_1,     rightTrain,    tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S2_C2_2,     motorI,        tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C1_1,    gripper1,             tServoStandard)
#pragma config(Servo,  srvo_S1_C1_2,    gripper2,             tServoStandard)
#pragma config(Servo,  srvo_S1_C1_3,    box,                  tServoStandard)
#pragma config(Servo,  srvo_S1_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"

bool recieved = false;

void anushalizerobot()
{
	motor[leftTrain] = 0;
	motor[rightTrain] = 0;
	motor[Intake] = 0;
	nMotorEncoder[leftTrain] = 0;
	nMotorEncoder[rightTrain] = 0;
	nMotorEncoder[leftLift] = 0;
	nMotorEncoder[rightLift] = 0;
	servo[gripper1] = 90;
	servo[gripper2] = 145;
	servo[box] = 65;
}

int wait(int waitlel)
{
	wait1Msec(waitlel);
	return waitlel;
}


void resetEncoders()
{
	motor[leftTrain] = 0;
	motor[rightTrain] = 0;
	motor[leftLift] = 0;
	motor[rightLift] = 0;
	nMotorEncoder[leftTrain] = 0;
	nMotorEncoder[rightTrain] = 0;
	nMotorEncoder[leftLift] = 0;
	nMotorEncoder[rightLift] = 0;
	wait(250);
}

int Drive(float tileDistance, int Lspeed, int Rspeed)
{

	int Distance = 2500*tileDistance;

	while(abs(nMotorEncoder[rightTrain]) < abs(Distance))
	{
		motor[leftTrain] = Lspeed;
		motor[rightTrain] = Rspeed;
	}

	return Distance;
}

int IRPos;

task main()
{
	//waitForStart();
	anushalizerobot();
	wait(1000);


	if(SensorValue[IR] == 6)//find centerpiece position
	{
		IRPos = 1;
	}
	else if(SensorValue[IR] == 5)//find centerpiece position
	{
		IRPos = 2;
	}
	else //find centerpiece position
	{
		IRPos = 3;
	}


		nxtDisplayBigTextLine(2, "%d", SensorValue[IR]);
		nxtDisplayBigTextLine(4, "%d", IRPos);





	if(IRPos == 1)
	{

		Drive(1.5, 30, 30);
		resetEncoders();

		Drive(-0.8, 50, -50);
		resetEncoders();

		Drive(1, 30, 30);
		resetEncoders();

		Drive(0.8, -50, 50);
		resetEncoders();

		Drive(1.6, 80, 80);
		resetEncoders();

		Drive(-0.5, -50, -50);
		resetEncoders();

		Drive(-0.8, 50, -50);
		resetEncoders();

		Drive(0.6, 30, 30);
		resetEncoders();

		Drive(-0.8, 50, -50);
		resetEncoders();

		Drive(-3, -50, -50);
		resetEncoders();

		int x = 0;
		while(x  < 10000)
		{
			servo[gripper1] = 0;
			servo[gripper2] = 0;
			x++;
		}

		while(nMotorEncoder[leftLift] < 3600)
		{
			motor[leftLift] = motor[rightLift] = 100;
		}

		motor[leftLift] = motor[rightLift] = 0;
		wait(50);

		int y = 0;
		while(y < 10000)
		{
			servo[box] = 160;
			y++;
		}

		wait(1000);

		while(y > 0)
		{
				servo[box] = 65;
				y--;
		}
		wait(50);
		
		while(nMotorEncoder[leftLift] > 0)
		{
			motor[leftLift] = motor[rightLift] = -20;
		}
		
		resetEncoders();
		
	}
	else if(IRPos == 2)
	{
			Drive(2, 30, 30);
			resetEncoders();

			Drive(-0.4, 50, -50);
			resetEncoders();

			Drive(1, 80, 80);
			resetEncoders();

			Drive(-0.4, -30, -30);
			resetEncoders();

			Drive(-0.8, 50, -50);
			resetEncoders();

			Drive(0.3, 30, 30);
			resetEncoders();

			Drive(-0.8, 50, -50);
			resetEncoders();

			Drive(-1.3, -30, -30);
			resetEncoders();

			Drive(-1.6, -30, -30);
			resetEncoders();

			int x = 0;
			while(x  < 10000)
			{
				servo[gripper1] = 0;
				servo[gripper2] = 0;
				x++;
			}

			while(nMotorEncoder[leftLift] < 3600)
			{
				motor[leftLift] = motor[rightLift] = 100;
			}

			motor[leftLift] = motor[rightLift] = 0;
			wait(50);

			int y = 0;
			while(y < 10000)
			{
				servo[box] = 160;
				y++;
			}

			wait(1000);

			while(y > 0)
			{
				servo[box] = 65;
				y--;
			}
	
			wait(50);
			
			while(nMotorEncoder[leftLift] > 0)
			{
				motor[leftLift] = motor[rightLift] = -20;
			}
				
			resetEncoders();

	}
	else if(IRPos == 3)
	{
		Drive(2.5, 30, 30);
		resetEncoders();
		
		Drive(-0.8, 50, -50);
		resetEncoders();
		
		Drive(0.6, 80, 80);
		resetEncoders();
		
		Drive(-0.5, -30, -30);
		resetEncoders();
		
		Drive(-0.8, 50, -50);
		resetEncoders();
		
		Drive(0.2, 30, 30);
		resetEncoders();
		
		Drive(-0.8, 50, -50);
		resetEncoders();
		
		Drive(2, -30, -50);
		resetEncoders();
		
		Drive(0.8, -50, 50);
		resetEncoders();
		
		Drive(3, -30, -30);
		resetEncoders();
		
		int x = 0;
			while(x  < 10000)
			{
				servo[gripper1] = 0;
				servo[gripper2] = 0;
				x++;
			}

			while(nMotorEncoder[leftLift] < 3600)
			{
				motor[leftLift] = motor[rightLift] = 100;
			}

			motor[leftLift] = motor[rightLift] = 0;
			wait(50);

			int y = 0;
			while(y < 10000)
			{
				servo[box] = 160;
				y++;
			}

			wait(1000);

			while(y > 0)
			{
				servo[box] = 65;
				y--;
			}
	
			wait(50);
			
			while(nMotorEncoder[leftLift] > 0)
			{
				motor[leftLift] = motor[rightLift] = -20;
			}
				
			resetEncoders();
	}


}
